<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>commonjs on Terry Pan</title>
    <link>https://terry-pan-dev.github.io/tags/commonjs/</link>
    <description>Recent content in commonjs on Terry Pan</description>
    <generator>Source Themes Academic (https://sourcethemes.com/academic/)</generator>
    <language>en-us</language>
    <lastBuildDate>Fri, 27 Jul 2018 00:00:00 +0000</lastBuildDate>
    
	    <atom:link href="https://terry-pan-dev.github.io/tags/commonjs/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Javascript modular history</title>
      <link>https://terry-pan-dev.github.io/post/js-modular-history/</link>
      <pubDate>Fri, 27 Jul 2018 00:00:00 +0000</pubDate>
      
      <guid>https://terry-pan-dev.github.io/post/js-modular-history/</guid>
      <description>&lt;p&gt;Javascript has been dramatically used in front-end and back-end compared to the
time when it was invented. When the time it was invented, it supposes to be a joy
programming language, doing some simple interactions between browser. However,
since the ubiquitous usage of browser. Javascript has become the most important
language in the web ever.&lt;/p&gt;

&lt;p&gt;Unlike language like Java and Python. Javascript does not have a module loader
initially. Here are several ways to load module from past to present.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Classic&lt;/li&gt;
&lt;li&gt;RequireJs(AMD)&lt;/li&gt;
&lt;li&gt;CommonJs&lt;/li&gt;
&lt;li&gt;ES6&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;old-fashion&#34;&gt;Old Fashion&lt;/h2&gt;

&lt;p&gt;In the past, when javascript was still not heavily used. There are probably only
several js files. It&amp;rsquo;s easy to manipulate it manually. Here is an example.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;&amp;lt;script src=&amp;quot;js/jquery.js&amp;quot;&amp;gt;&amp;lt;/script&amp;gt;
&amp;lt;script src=&amp;quot;js/point.js&amp;quot;&amp;gt;&amp;lt;/script&amp;gt;
&amp;lt;script src=&amp;quot;js/line.js&amp;quot;&amp;gt;&amp;lt;/script&amp;gt;
&amp;lt;script src=&amp;quot;js/polygon.js&amp;quot;&amp;gt;&amp;lt;/script&amp;gt;
&amp;lt;script src=&amp;quot;js/main.js&amp;quot;&amp;gt;&amp;lt;/script&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Since there are many modules/files rely on jQuery, if you put jQuery script tag
at the end of this file, the modules which rely on jQuery library will not work
just like building a house you need build basement first, then each level up or
like draw an image, you need point, line and polygon first. The disadvantage of
this kind of module loader is you have always take care of them, once you put
them in a wrong order, the console will yell. If your application is small,
that&amp;rsquo;s okey, you can well manipulate them manually. Suppose this is a big project
which involves many developers, to control the dependency manually will be a
nightmare.&lt;/p&gt;

&lt;h2 id=&#34;requirejs&#34;&gt;RequireJs&lt;/h2&gt;

&lt;p&gt;Here is a paragraph I get from requirejs homepage.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;RequireJS is a JavaScript file and module loader. It is optimized for in-browser
use, but it can be used in other JavaScript environments, like Rhino and Node.
Using a modular script loader like RequireJS will improve the speed and quality
of your code.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;As this quote mentioned requirejs is a module loader, it can be used both in
front-end and back-end. It&amp;rsquo;s quite simple to use it. Suppose you have a document
file tree like this.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-markdown&#34;&gt;- project_directory/
  - index.html
  - scripts/
    - main.js
    - utils.js
      - someutils.js
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The main.js is your main entry point, every code should be traced back to main.js,
unlike old fashion, you don&amp;rsquo;t have to create many script tags. All you need to
do is like following.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-html&#34;&gt;&amp;lt;!DOCTYPE html&amp;gt;
&amp;lt;html&amp;gt;
    &amp;lt;head&amp;gt;
        &amp;lt;title&amp;gt;My Sample Project&amp;lt;/title&amp;gt;
        &amp;lt;!-- data-main attribute tells require.js to load
             scripts/main.js after require.js loads. --&amp;gt;
        &amp;lt;script data-main=&amp;quot;scripts/main&amp;quot; src=&amp;quot;scripts/require.js&amp;quot;&amp;gt;&amp;lt;/script&amp;gt;
    &amp;lt;/head&amp;gt;
    &amp;lt;body&amp;gt;
        &amp;lt;h1&amp;gt;My Sample Project&amp;lt;/h1&amp;gt;
    &amp;lt;/body&amp;gt;
&amp;lt;/html&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The attribute data-main defines your main entry point, the src attribute will
load the require.js modular loader first, then run main.js&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;requirejs([&amp;quot;utils/someutils.js&amp;quot;], function(util) {
    //This function is called when scripts/helper/util.js is loaded.
    //If util.js calls define(), then this function is not fired until
    //util&#39;s dependencies have loaded, and the util argument will hold
    //the module value for &amp;quot;helper/util&amp;quot;.
});
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Inside main.js you could load all dependencies in the first argument of function
requirejs and this argument will be passed as the first argument of the callback
function. Simply to say util is the alias of &amp;ldquo;utils/someutils.js&amp;rdquo;&lt;/p&gt;

&lt;p&gt;RequireJs also provide config functionality. Suppose you want to use jQuery.
Inside your main.js you could add following code&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;requirejs.config({
    baseUrl: &#39;utils/lib&#39;,
    paths: {
        // the left side is the module ID,
        // the right side is the path to
        // the jQuery file, relative to baseUrl.
        // Also, the path should NOT include
        // the &#39;.js&#39; file extension. This example
        // is using jQuery 1.9.0 located at
        // utils/lib/jquery-1.9.0.js, relative to
        // the HTML page.
        jquery: &#39;jquery-1.9.0&#39;
    }
});
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Here the baseUrl can make things much easier. Every time you want to use jQuery
as a dependency, you don&amp;rsquo;t have to manually type the full path. Here is the example,
suppose you want to create you own modular called addTitle.js&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;define([&amp;quot;jquery&amp;quot;], function($){
  // create your own module here
  // can use $ sign as we normally use jQuery
});
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;commonjs&#34;&gt;CommonJs&lt;/h2&gt;

&lt;p&gt;CommonJs is used in backend nodeJs. It&amp;rsquo;s the default module loader for nodeJs.
It has two main systems: require/import and export.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;const myModule = require(&#39;path/to/mymodule&#39;);
// if this is a class, it&#39;s really to be used
const myObject = new myModule();
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Some languages like Python and Java, you don&amp;rsquo;t explicitly to export your class
or methods. However, in commonJs your have to explicitly to export your class
and methods to be used&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;// one way to export
module.exports = class Dog{
  constructor(name){
    this.name = name;
  }
  
  bark(){
    console.log(&amp;quot;Woooo&amp;quot;);
  }
};

// or your can create class first, then export it
class Dog{
  // define your class first
}
module.exports = Dog;

// only want to export certain methods
module.exports.add = (a,b)=&amp;gt; a + b;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;I think the grammar of commonJs is more natural and it&amp;rsquo;s easier to understand&lt;/p&gt;

&lt;h2 id=&#34;es6-es2015&#34;&gt;ES6/ES2015&lt;/h2&gt;

&lt;p&gt;ES6 is the new standard for javascript. Unfortunately, it&amp;rsquo;s not supported by
modern browsers now. It has added many new features and syntactic sugar. These
new features make developers who come from different language background feel
easy to learn javascript. In order to use it, you have to use Babel to transpile
it to current browsers supported javascript code.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;// this is your partical.js module
export default class Partical{
  // here is your implementation
}

// this is your personalizedmath.js module
export function square(x) {
    return x * x;
}

export function pow3(x){
  return x**3
}

// this is your main.js module
// since this is not default export, brakets is required
import { square, pow3 } from &#39;lib/personalizemath&#39;;
// since this is default export, there is no need to
// add brakets, and you can rename to what name you want
import Partical from &#39;lib/partical&#39;
console.log(square(11)); // -&amp;gt; 121
console.log(pow3(2)); // -&amp;gt; 8
let myPartical = new Partical();
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;ES6 adds many features, it worths to study. Here is a short list for ES6 features&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Arrow function &lt;code&gt;(a,b)=&amp;gt; a+b&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;default parameter &lt;code&gt;const myfunc = function(height=50, color=&#39;red&#39;){...}&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;spread operator &lt;code&gt;const listA = [1,2,3]; const listB = [&#39;A&#39;, &#39;B&#39;,Â ...listA] // listB -&amp;gt; &#39;A&#39;, &#39;B&#39;, 1, 2, 3&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;reference&#34;&gt;Reference&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://www.youtube.com/watch?v=JDDn57_z5Og&amp;amp;t=4s&amp;amp;frags=pl%2Cwn&#34; target=&#34;_blank&#34;&gt;https://www.youtube.com/watch?v=JDDn57_z5Og&amp;amp;t=4s&amp;amp;frags=pl%2Cwn&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://requirejs.org/&#34; target=&#34;_blank&#34;&gt;https://requirejs.org/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://nodejs.org/&#34; target=&#34;_blank&#34;&gt;https://nodejs.org/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://babeljs.io/&#34; target=&#34;_blank&#34;&gt;https://babeljs.io/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/import&#34; target=&#34;_blank&#34;&gt;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/import&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</description>
    </item>
    
  </channel>
</rss>
