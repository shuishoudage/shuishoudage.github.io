<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>AWS on Terry Pan</title>
    <link>https://terry-pan-dev.github.io/categories/aws/</link>
    <description>Recent content in AWS on Terry Pan</description>
    <generator>Source Themes Academic (https://sourcethemes.com/academic/)</generator>
    <language>en-us</language>
    <lastBuildDate>Mon, 03 Feb 2020 00:00:00 +0000</lastBuildDate>
    
	    <atom:link href="https://terry-pan-dev.github.io/categories/aws/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>AWS-SQS</title>
      <link>https://terry-pan-dev.github.io/post/aws-sqs/</link>
      <pubDate>Mon, 03 Feb 2020 00:00:00 +0000</pubDate>
      
      <guid>https://terry-pan-dev.github.io/post/aws-sqs/</guid>
      <description>


&lt;div id=&#34;aws-sqs&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;AWS SQS&lt;/h2&gt;
&lt;div id=&#34;introduction&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;Introduction&lt;/h3&gt;
&lt;p&gt;AWS provides several messaging services. For example, SQS, SNS and Amazon MQ.
Among these three, SNS is a pub/sub messaging system, it’s commonly used as
a notification system, for example, subscribe a topic from SNS and whenever there
is an update notification, SNS will push the notification to end devices
(smartphones, tablets). Whereas, amazon MQ is a mature messaging solution which
can integrate the on-premises messaging system with the minimum burden. In this
article, I am going to give details and best practices of using AWS SQS.&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;different-queues&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;Different queues&lt;/h3&gt;
&lt;p&gt;There are several advantages of using AWS SQS service, it’s fully managed service
which means you don’t have to worry about the duribility and scalability of the
service, of course you don’t have to manage the server. SQS is generally used to
decouple your architecture which provides more reliable system. SQS provides two
types of message queue, one is &lt;strong&gt;standard queue&lt;/strong&gt;, standard queue guarantees
&lt;strong&gt;at-least-once&lt;/strong&gt; message delivery. Therefore, when your application requires
the sensitivity of delivery once message, you have to choose &lt;strong&gt;FIFO queue&lt;/strong&gt;.
What’s more, standard queue will do its best to keep the message deliver in order.
However, there is no guarantee for the order. Generally to say, standard queue
provides a simple queue service, it can be used in an application without the
restriction of delivery order and times. In the contrary, &lt;strong&gt;FIFO queue&lt;/strong&gt; supports
strong ordering and &lt;strong&gt;exactly-once&lt;/strong&gt; message delivery. Hence, if your application
has these restrictions you’d better choose &lt;strong&gt;FIFO queue&lt;/strong&gt;. Another important
feature of SQS is that if you have several clients want to get a message, SQS
is not the proper service to pick, instead using SNS.&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;sqs-key-attributes&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;SQS key attributes&lt;/h3&gt;
&lt;p&gt;There are several important settings worth to know when you creating a new queue.
&lt;img src=&#34;https://i.imgur.com/xsktuA1.png&#34; alt=&#34;sqs&#34; /&gt;
First of all, &lt;strong&gt;default visibility timeout&lt;/strong&gt; is an important property. Here is
an image that from the aws official documents can help me explain it well.
&lt;img src=&#34;https://docs.aws.amazon.com/AWSSimpleQueueService/latest/SQSDeveloperGuide/images/sqs-message-lifecycle-diagram.png&#34; alt=&#34;aws_sqs&#34; /&gt;&lt;/p&gt;
&lt;p&gt;when you push a message into the queue, the message will be copied into several
servers (high availibity). Then the message is sitting there waiting for other
service to pick (EC2, lambda, etc.). Whenever there is a service picking the message
the visibility time out clock starts count while the message is not visible any
more. Suppose the task (message) can be finished in the timeout peroid, the
message will be deleted from the queue. Therefore, best practice to setup this
timeout is setting it greater than the task processing time, otherwise, while
the task is still processing, when the visibility timeout ends, this message
will be visible by another service (process) which cause duplicated processing.&lt;/p&gt;
&lt;p&gt;Next two settings are simple, &lt;strong&gt;message retention period&lt;/strong&gt; is the max time the
queue can keep the message while no process picks it. And &lt;strong&gt;maximum message size&lt;/strong&gt;
is simply as the name says the max message size. &lt;strong&gt;Delivery delay&lt;/strong&gt; is the time
that when a message reach the queue, the message will be freezed from this amount
of time, notice this time is applied for every new reached message. Next import
attribute is &lt;strong&gt;receive message wait time&lt;/strong&gt;, this attribute sometimes is referred
as &lt;strong&gt;long polling&lt;/strong&gt;. It works as following, whenever there is new process trying
to pick a message, when this attribute is setting as 0, if the process finds the
queue is empty, it will not wait for the new message arrives, the process will
immediately shutdown the connection, in such scenaro, unnecessary connections
will be established multiple times which costs extra billing. Therefore, normally
we will set the value more than 0.&lt;/p&gt;
&lt;div id=&#34;dead-letter-queue&#34; class=&#34;section level4&#34;&gt;
&lt;h4&gt;Dead letter queue&lt;/h4&gt;
&lt;p&gt;dead letter queue is another queue you have to associate with a queue you have
created. Which used to store those messages cannot be processed by that queue.
For example, you can create another process which has more CPU and memory power
to process the message that cannot be processed from the standard queue. What’s
more, you might want to use dead letter queue to diagnose why the message cannot
be processed in the standard queue. There is only one important attribute,
&lt;strong&gt;maximum receives&lt;/strong&gt;, this attribute is used to determine after how many processes
tried the message failed, then put the message into the dead letter queue.&lt;/p&gt;
&lt;p&gt;About the encryption option, please refer my another article called &lt;strong&gt;AWS KMS&lt;/strong&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;other-attributes&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;Other attributes&lt;/h3&gt;
&lt;p&gt;&lt;img src=&#34;https://docs.aws.amazon.com/AWSSimpleQueueService/latest/SQSDeveloperGuide/images/sqs-tutorials-creating-queue-queue-type-content-based-deduplication-columns.png&#34; alt=&#34;other&#34; /&gt;
when turn on the functionality of &lt;strong&gt;content-based deduplication&lt;/strong&gt;. The duplicated
message will be removed automatically by the queues. &lt;strong&gt;Message available&lt;/strong&gt; is
the metric that shows amount of messages that you pushed into the queue and
&lt;strong&gt;Messages in Flight&lt;/strong&gt; is the total amount of messages that is processing.&lt;/p&gt;
&lt;p&gt;There are several scenarios a SQS queue can be used, normally combine SQS queue
with lambda is a good practice, you can trigger a lambda function whenever there
is a new message arrives the queue.
&lt;img src=&#34;https://docs.aws.amazon.com/AWSSimpleQueueService/latest/SQSDeveloperGuide/images/sqs-tutorials-configure-incoming-messages-trigger-lambda-function-drop-down.png&#34; alt=&#34;lambda&#34; /&gt;&lt;/p&gt;
&lt;p&gt;Another use case is combining SQS with SNS service to create a fan out architecture.
Because, SQS can guarantee the message comes from a unique resource, whereas SNS
can response the multiple delivery work.
&lt;img src=&#34;https://theburningmonk.com/wp-content/uploads/2018/04/img_5ac37a9619876.png&#34; alt=&#34;fanout&#34; /&gt;&lt;/p&gt;
&lt;p&gt;the image above shows such architecture, the leftmost is the SQS service, the
middle one is SNS service, suppose you have one message that has to be processed
by different services, maybe one service is doing filtering, another service
is for storing this message.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
</description>
    </item>
    
    <item>
      <title>AWS-KMS</title>
      <link>https://terry-pan-dev.github.io/post/aws-kms/</link>
      <pubDate>Fri, 24 Jan 2020 00:00:00 +0000</pubDate>
      
      <guid>https://terry-pan-dev.github.io/post/aws-kms/</guid>
      <description>


&lt;div id=&#34;aws-kms&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;AWS KMS&lt;/h3&gt;
&lt;p&gt;AWS KMS is the service that amozon provided for managing encryption keys.&lt;/p&gt;
&lt;p&gt;Before really dive into AWS KMS, it’s better to introduce several concepts about
encryption. Generally there are two types of encryption, one is symmetric encryption
another is asymmetric encryption.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Symmetric encryption&lt;/strong&gt; is normally used for local file encryption, as the name indicates
symmetric encryption uses one key to encrypt data and using same key to decrypt
data, in such case keep this key secret is important.&lt;/p&gt;
&lt;div class=&#34;figure&#34;&gt;
&lt;img src=&#34;https://www.ssl2buy.com/wiki/wp-content/uploads/2015/12/Symmetric-Encryption.png&#34; alt=&#34;&#34; /&gt;
&lt;p class=&#34;caption&#34;&gt;symmetric&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;Asymmetric encryption&lt;/strong&gt; is generally used for transmission scenario, for example
keep a secret tunnel to transmit files. Asymmetric encryption has two keys. One
key is called private key, another key is called public key. Private key will be
always kept in the sender part and never revealed it publicly. Whereas, public key
can be transmitted to worldwide. General use case is following&lt;/p&gt;
&lt;p&gt;Step 1: sender will send his/her public key to receiver (actually anyone can have
the public key).&lt;/p&gt;
&lt;p&gt;Step 2: receiver is now able to use the public key to encrypt his/her data, then
send back to the sender, even there is an eavesdropper, the eavesdropper cannot
use his/her public key to decrypt this data. Therefore, data will be kept secret
between the real sender and receiver.&lt;/p&gt;
&lt;p&gt;Step 3: when sender gets the encrypt data package, sender uses his private key
to decrypt the packge.&lt;/p&gt;
&lt;div class=&#34;figure&#34;&gt;
&lt;img src=&#34;https://www.clickssl.net/wp-content/uploads/2019/12/asymmetric-encryption.jpg&#34; alt=&#34;&#34; /&gt;
&lt;p class=&#34;caption&#34;&gt;asymmetric&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;Both symmetric and Asymmetric encrytion are used for avoiding information leak to
others. There is another important concept called &lt;strong&gt;digital signature&lt;/strong&gt; is also worth
to mention before give the detail of AWS KMS. Digital signature is used for keeping
data integrity, avoiding data forge, notice it’s different than symmetric and
asymmetric above, digital signature is not used to make data secret. However, digital
signature utilizes asymmetric encryption. The way that digital signature works
by following step.&lt;/p&gt;
&lt;p&gt;Step 1: sender using certain hashing algorithm (md5 for example) to generate a data
digest, this digest represents the data, even one byte change, the digest will
be different.&lt;/p&gt;
&lt;p&gt;Step 2: sender using his/her private key to encrypt the digest which can be
decrypt by public key.&lt;/p&gt;
&lt;p&gt;Step 3: when receiver gets the data and encryptd digest, receiver can decrypt
the digest first, then using same hashing algorithm to hash the received data.
Afterwards, comparing the generated digest with the received digest, if there is
any difference, it means the data has changed by someone.&lt;/p&gt;
&lt;p&gt;Notice, anyone who has the public key can decrypt the sender’s package. However,
once they change any information inside the data and using their public key to
encrypt the digest. The real receiver will not be able to use his public key
to decrypt the encrypted digest, since public key cannot used to encrypt/decrypt
data.&lt;/p&gt;
&lt;div class=&#34;figure&#34;&gt;
&lt;img src=&#34;https://i.stack.imgur.com/NFCbj.png&#34; alt=&#34;&#34; /&gt;
&lt;p class=&#34;caption&#34;&gt;digital&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;Now, it’s the right time to give the detail of AWS KMS. AWS KMS is used to
manage symmetric keys, not asymmetric keys. AWS KMS uses a concept called
&lt;strong&gt;envolope encryption&lt;/strong&gt;, before introduce this concept, it’s better to understand
two other things, one is called master key, another is called data key. Data key
is the real encryption key that used to encrypt your data. Whereas, master is
used to encrypt your data key, this process makes the encryption more strong.
There is one more difference between data key and master key, you can view the
data key but you cannot really view the master key, because the master is kept
on AWS and managed by AWS, you can use but not view it. The process of envolope
encryption is like this, AWS KMS generates data keys which used to encrypt client
data, at the same time AWS KMS using master key to encrypt the data keys. Now you
use the generated data keys (plain text) to encrypt data with the encrypted
data key attached and the plain text data keys will be destroied. When clients
want to decrypt the data, they have to use the master key to decrypt the encrypted
data key first, after the data has been decrypted, clients can use the decrypted
data key to decrypt the data &lt;span class=&#34;citation&#34;&gt;&lt;span class=&#34;csl-baseline&#34;&gt;&lt;span class=&#34;smallcaps&#34;&gt;[&lt;a href=&#34;#ref-ables2010escrowed&#34; role=&#34;doc-biblioref&#34;&gt;1&lt;/a&gt;]&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;.&lt;/p&gt;
&lt;div class=&#34;figure&#34;&gt;
&lt;img src=&#34;https://docs.aws.amazon.com/kms/latest/developerguide/images/key-hierarchy-cmk.png&#34; alt=&#34;&#34; /&gt;
&lt;p class=&#34;caption&#34;&gt;kms&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;references&#34; class=&#34;section level3 unnumbered&#34;&gt;
&lt;h3&gt;References&lt;/h3&gt;
&lt;div id=&#34;refs&#34; class=&#34;references&#34;&gt;
&lt;div id=&#34;ref-ables2010escrowed&#34;&gt;
&lt;p&gt;1. &lt;strong&gt;Escrowed data and the digital envelope&lt;/strong&gt;.&lt;br /&gt;
Ables K, Ryan MD. &lt;br /&gt;
In: International conference on trust and trustworthy computing. Springer; 2010. pages 246–56.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
</description>
    </item>
    
  </channel>
</rss>
